{"version":3,"sources":["webpack://todo-list/./src/aggregator.js","webpack://todo-list/./src/aside.js","webpack://todo-list/./src/header.js","webpack://todo-list/./src/index.js","webpack://todo-list/./src/main-ele.js","webpack://todo-list/./src/new-proj-modal.js","webpack://todo-list/./src/new-task-modal.js","webpack://todo-list/./src/shared.js","webpack://todo-list/webpack/bootstrap","webpack://todo-list/webpack/runtime/define property getters","webpack://todo-list/webpack/runtime/hasOwnProperty shorthand","webpack://todo-list/webpack/runtime/make namespace object","webpack://todo-list/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAmC;AACW;AAC9C,WAAW,oBAAoB;AACkB;AACL;AACgB;;;;;;;;;;;;;;;;ACLrB;;AAEvC;AACA,uBAAuB,gEAAoB,6BAA6B,mCAAmC;AAC3G,wBAAwB,gEAAoB,eAAe,gBAAgB;AAC3E;AACA;AACA,4BAA4B,gEAAoB,wDAAwD,uDAAuD;AAC/J;AACA;AACA,qBAAqB,gEAAoB,iDAAiD,gBAAgB;AAC1G;AACA,CAAC;;AAED,iEAAe,gBAAgB,E;;;;;;;;;;;;;;;ACdQ;;AAEvC;AACA;AACA;AACA,wBAAwB,gEAAoB;AAC5C,0BAA0B,gEAAoB,sBAAsB,sBAAsB;AAC1F,kBAAkB,gEAAoB,cAAc,gBAAgB;;AAEpE;AACA;;AAEA;AACA;AACA,0BAA0B,gEAAoB,YAAY,6BAA6B;AACvF;AACA;AACA;;AAEA,mBAAmB,gEAAoB;AACvC,sBAAsB,gEAAoB,qCAAqC,kBAAkB;AACjG;AACA,CAAC;;AAED,iEAAe,iBAAiB,E;;;;;;;;;;;;ACxB2D;;AAE3F;AACA,kBAAkB,kDAAM,EAAE,iDAAK,EAAE,mDAAO,EAAE,wDAAY,EAAE,wDAAY;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,gEAAoB,kBAAkB,mBAAmB;;AAE1F,gCAAgC,gEAAoB;AACpD;AACA,qDAAqD,gBAAgB;;AAErE,4BAA4B,gEAAoB,sCAAsC,cAAc;AACpG;AACA;;AAEA;AACA,mCAAmC,gEAAoB;AACvD;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8BAA8B;AACxE;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA,+BAA+B,gEAAoB,2BAA2B,OAAO,mBAAmB,WAAW;AACnH,2CAA2C,oBAAoB;;AAE/D,wFAAwF,mBAAmB;AAC3G,2FAA2F,oBAAoB;;AAE/G;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,gEAAoB,sBAAsB,mBAAmB;;AAEtF,wBAAwB,gEAAoB;AAC5C;AACA,6CAA6C,gBAAgB;;AAE7D;AACA;AACA,oBAAoB,gEAAoB,wBAAwB,8CAA8C;;AAE9G;AACA;AACA,sBAAsB,gEAAoB,0BAA0B,+CAA+C;;AAEnH,oBAAoB,gEAAoB,0DAA0D,cAAc;AAChH;AACA;;AAEA,uBAAuB,gEAAoB,wBAAwB,OAAO,gBAAgB,WAAW;AACrG;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,+CAA+C,gBAAgB;;AAE/D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD,2BAA2B;;AAE9E;AACA;AACA,mDAAmD,oBAAoB;AACvE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AA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","file":"main.js","sourcesContent":["export {shared} from \"./shared.js\";\r\nexport {default as header} from \"./header.js\";\r\n// export {default as projects} from \"./projects.js\";\r\nexport {default as mainEle} from \"./main-ele.js\";\r\nexport {default as aside} from \"./aside.js\";\r\nexport {default as newProjModal} from \"./new-proj-modal.js\";\r\nexport {default as newTaskModal} from \"./new-task-modal\";","import {shared} from \"./aggregator.js\";\r\n\r\nconst asideAreaContent = (() => {\r\n    const newProjBtn = shared.createElement(\"button\", [\"New Project\"], {type: \"button\", id: \"new-proj-btn\"});\r\n    const projListDiv = shared.createElement(\"div\", null, {id: \"proj-list\"});\r\n    const footerIconEle = document.createElement(\"i\");\r\n    footerIconEle.classList.add(\"fas\", \"fa-arrow-alt-circle-right\");\r\n    const footerAnchorEle = shared.createElement(\"a\", [\"Created by Oluwatobi Sofela \", footerIconEle], {href: \"https://www.codesweetly.com/\", target: \"_blank\"});\r\n    const footerEle = document.createElement(\"footer\");\r\n    footerEle.append(footerAnchorEle);\r\n    const asideEle = shared.createElement(\"aside\", [newProjBtn, projListDiv, footerEle], {id: \"aside-ele\"});\r\n    return asideEle;\r\n})();\r\n\r\nexport default asideAreaContent;","import {shared} from \"./aggregator.js\";\r\n\r\nconst headerAreaContent = (() => {\r\n    const logoIconEle = document.createElement(\"i\");\r\n    logoIconEle.classList.add(\"fas\", \"fa-list-alt\");\r\n    const logoSpanEle = shared.createElement(\"span\", [logoIconEle, \" My Plans\"]);\r\n    const logoAnchorEle = shared.createElement(\"a\", [logoSpanEle], {href: \"#\", id: \"logo\"});\r\n    const ulEle = shared.createElement(\"ul\", null, {id: \"nav-links\"});\r\n\r\n    const menus = [\"Today\", \"Tomorrow\", \"This Week\", \"Next Week\", \"All Tasks\"];\r\n    menus.forEach(createMenuLink);\r\n\r\n    function createMenuLink(i) {\r\n        const liEle = document.createElement(\"li\");\r\n        const anchorEle = shared.createElement(\"a\", [i], {href: \"#\", class: \"nav-link\"});\r\n        liEle.append(anchorEle);\r\n        ulEle.append(liEle);\r\n    }\r\n\r\n    const navEle = shared.createElement(\"nav\", [ulEle]);\r\n    const headerEle = shared.createElement(\"header\", [logoAnchorEle, navEle], {id: \"main-header\"});\r\n    return headerEle;\r\n})();\r\n\r\nexport default headerAreaContent;","import {shared, header, aside, mainEle, newProjModal, newTaskModal} from \"./aggregator.js\";\r\n\r\nconst contentDiv = document.getElementById(\"content\");\r\ncontentDiv.append(header, aside, mainEle, newProjModal, newTaskModal);\r\n\r\nconst navLinks = Array.from(document.querySelector(\"#nav-links\").children);\r\nconst asideEleNode = document.getElementById(\"aside-ele\");\r\nconst projListDiv = document.getElementById(\"proj-list\");\r\nconst projCards = projListDiv.children;\r\nconst mainEleNode = document.getElementById(\"main-ele\");\r\nconst activePgTitle = document.getElementById(\"active-pg-title\");\r\nconst activePgBody = document.getElementById(\"active-pg-body\");\r\nconst taskCards = activePgBody.children;\r\n\r\nconst newProjModalBg = document.getElementById(\"new-proj-modal-bg\");\r\nconst closeProjModalBtn = document.getElementById(\"close-proj-modal\");\r\nconst modalBoxProjTitle = document.getElementById(\"proj-title\");\r\nconst cancelProjBtn = document.getElementById(\"cancel-proj-btn\");\r\nconst createProjBtn = document.getElementById(\"create-proj-btn\");\r\n\r\nconst newTaskModalBg = document.getElementById(\"new-task-modal-bg\");\r\nconst closeTaskModalBtn = document.getElementById(\"close-task-modal\");\r\nconst modalBoxTaskTitle = document.getElementById(\"task-title\");\r\nconst modalBoxTaskNote = document.getElementById(\"task-note\");\r\nconst modalBoxTaskDate = document.getElementById(\"task-date\");\r\nconst modalBoxTaskImportance = document.getElementById(\"task-importance\");\r\nconst projDropDown = document.getElementById(\"proj-dropdown\");\r\nconst cancelTaskBtn = document.getElementById(\"cancel-task-btn\");\r\nconst addTaskBtn = document.getElementById(\"add-task-btn\");\r\n\r\nconst projsAndTasks = {\r\n    Important: [], \r\n    Random: []\r\n};\r\n\r\nconst defaultProjs = (() => {\r\n    for (const prop in projsAndTasks) {\r\n        if (prop === \"Important\" || prop === \"Random\") {\r\n            const projNameSpan = shared.createElement(\"span\", [prop], {class: \"proj-name\"});\r\n    \r\n            const taskAmtSpan = shared.createElement(\"span\", [projsAndTasks[prop].length]);\r\n            const projNameConvert = prop.toLowerCase().replace(/\\W/g, \"-\");\r\n            taskAmtSpan.classList.add(\"task-amt\", `${projNameConvert}-task-amt`);\r\n            \r\n            const projDiv = shared.createElement(\"div\", [projNameSpan, taskAmtSpan], {class: \"proj\"});\r\n            projDiv.addEventListener(\"click\", displayProj);\r\n            projListDiv.append(projDiv);\r\n\r\n            if (prop !== \"Important\") {\r\n                const projOptEle = shared.createElement(\"option\", [prop]);\r\n                projDropDown.append(projOptEle);\r\n            }\r\n        }\r\n    }\r\n})();\r\n\r\nlet clickedProjCardIndex = null;\r\nlet clickedTaskCardIndex = null;\r\n\r\nwindow.addEventListener(\"click\", closeModal);\r\nwindow.addEventListener(\"load\", displayTodayTasks);\r\nnavLinks.forEach(i => i.addEventListener(\"click\", displayNavName));\r\ncreateProjBtn.addEventListener(\"click\", addProjName);\r\naddTaskBtn.addEventListener(\"click\", addTask);\r\nmainEleNode.addEventListener(\"click\", actOnTaskEle);\r\nasideEleNode.addEventListener(\"click\", actOnProjEle);\r\n\r\nfunction displayProj() {\r\n    const clickedProj = this.querySelector(\".proj-name\").innerText;\r\n    activePgTitle.innerText = clickedProj;\r\n\r\n    while (activePgBody.firstChild) {\r\n        activePgBody.firstChild.remove();\r\n    }\r\n\r\n    projsAndTasks[clickedProj].forEach(i => createTask(i));\r\n}\r\n\r\nfunction closeModal(objClicked) {\r\n    if (objClicked.target === newProjModalBg || objClicked.target === closeProjModalBtn || objClicked.target === cancelProjBtn) {\r\n        modalBoxProjTitle.value = \"\";\r\n        newProjModalBg.style.display = \"none\";\r\n    }\r\n    if (objClicked.target === newTaskModalBg || objClicked.target === closeTaskModalBtn || objClicked.target === cancelTaskBtn) {\r\n        modalBoxTaskTitle.value = \"\";\r\n        modalBoxTaskNote.value = \"\";\r\n        modalBoxTaskDate.value = \"\";\r\n        modalBoxTaskImportance.checked = false;\r\n        newTaskModalBg.style.display = \"none\";\r\n    }\r\n}\r\n\r\nfunction displayTodayTasks() {\r\n    activePgTitle.innerText = \"Today\";\r\n}\r\n\r\nfunction displayNavName() {\r\n    activePgTitle.innerText = this.querySelector(\".nav-link\").innerText;\r\n}\r\n\r\nfunction showNewProjModal() {\r\n    newProjModalBg.style.display = \"block\";\r\n}\r\n\r\nfunction addProjName() {\r\n    if (!modalBoxProjTitle.value) {\r\n        alert(\"Error: Name field must not be blank. Please provide a project name.\");\r\n    } else {\r\n        if (createProjBtn.innerText === \"Create Project\") {\r\n            for (const prop in projsAndTasks) {\r\n                if (prop.toLowerCase() === modalBoxProjTitle.value.toLowerCase()) {\r\n                    alert(\"Error: A project already exist with that name. Please choose a different project name.\");\r\n                    return;\r\n                }\r\n            }\r\n            Object.assign(projsAndTasks, {[modalBoxProjTitle.value]: []});\r\n            createProj(modalBoxProjTitle.value);\r\n        } else {\r\n            const currProjName = projCards[clickedProjCardIndex].querySelector(\".proj-name\").innerText;\r\n            const currprojNameConvert = currProjName.toLowerCase().replace(/\\W/g, \"-\");\r\n\r\n            const newProjName = modalBoxProjTitle.value;\r\n            const newprojNameConvert = newProjName.toLowerCase().replace(/\\W/g, \"-\");\r\n\r\n            const projOptEle = shared.createElement(\"option\", [newProjName], {id: `${newprojNameConvert}-proj-opt`});\r\n            projDropDown.querySelector(`#${currprojNameConvert}-proj-opt`).replaceWith(projOptEle);\r\n\r\n            projCards[clickedProjCardIndex].querySelector(\".task-amt\").classList.add(`${newprojNameConvert}-task-amt`);\r\n            projCards[clickedProjCardIndex].querySelector(\".task-amt\").classList.remove(`${currprojNameConvert}-task-amt`);\r\n\r\n            projCards[clickedProjCardIndex].querySelector(\".edit-proj-btn\").setAttribute(\"proj\", newprojNameConvert);\r\n            projCards[clickedProjCardIndex].querySelector(\".trash-proj-btn\").setAttribute(\"proj\", newprojNameConvert);\r\n\r\n            projsAndTasks[newProjName] = projsAndTasks[currProjName];\r\n            delete projsAndTasks[currProjName];\r\n\r\n            if (activePgTitle.innerText === currProjName) {\r\n                activePgTitle.innerText = newProjName;\r\n            }\r\n\r\n            projCards[clickedProjCardIndex].querySelector(\".proj-name\").innerText = newProjName;\r\n            newProjModalBg.style.display = \"none\";\r\n            modalBoxProjTitle.value = \"\";\r\n        }\r\n    }\r\n}\r\n\r\nfunction createProj(projName) {\r\n    const projNameSpan = shared.createElement(\"span\", [projName], {class: \"proj-name\"});\r\n\r\n    const taskAmtSpan = shared.createElement(\"span\", [projsAndTasks[projName].length]);\r\n    const projNameConvert = projName.toLowerCase().replace(/\\W/g, \"-\");\r\n    taskAmtSpan.classList.add(\"task-amt\", `${projNameConvert}-task-amt`);\r\n\r\n    const editIcon = document.createElement(\"i\");\r\n    editIcon.classList.add(\"fas\", \"fa-pen\");\r\n    const editBtn = shared.createElement(\"button\", [editIcon], {class: \"edit-proj-btn\", proj: projNameConvert});\r\n\r\n    const deleteIcon = document.createElement(\"i\");\r\n    deleteIcon.classList.add(\"fas\", \"fa-trash\");\r\n    const deleteBtn = shared.createElement(\"button\", [deleteIcon], {class: \"trash-proj-btn\", proj: projNameConvert});\r\n    \r\n    const projDiv = shared.createElement(\"div\", [projNameSpan, taskAmtSpan, editBtn, deleteBtn], {class: \"proj\"});\r\n    projDiv.addEventListener(\"click\", displayProj);\r\n    projListDiv.append(projDiv);\r\n\r\n    const projOptEle = shared.createElement(\"option\", [projName], {id: `${projNameConvert}-proj-opt`});\r\n    projDropDown.append(projOptEle);\r\n\r\n    modalBoxProjTitle.value = \"\";\r\n    newProjModalBg.style.display = \"none\";\r\n}\r\n\r\nfunction showNewTaskModal() {\r\n    newTaskModalBg.style.display = \"block\";\r\n}\r\n\r\nfunction addTask() {\r\n    if (!modalBoxTaskTitle.value) {\r\n        alert(\"Error: Task field must not be blank. Please write a task.\");\r\n    } else {\r\n        if (addTaskBtn.innerText === \"Add Task\") {\r\n            for (const prop in projsAndTasks) {\r\n                if (prop === projDropDown.value) {\r\n                    const projNameConvert = prop.toLowerCase().replace(/\\W/g, \"-\");\r\n                    const taskInfo = {\r\n                        taskProj: prop,\r\n                        taskDone: false,\r\n                        task: modalBoxTaskTitle.value,\r\n                        note: modalBoxTaskNote.value,\r\n                        dueDate: modalBoxTaskDate.value,\r\n                        important: modalBoxTaskImportance.checked\r\n                    };\r\n    \r\n                    projsAndTasks[prop].push(taskInfo);\r\n\r\n                    if (taskInfo.important) {\r\n                        projsAndTasks.Important.push(taskInfo);\r\n                        document.querySelector(\".important-task-amt\").innerText = projsAndTasks.Important.length;\r\n                    }\r\n                    \r\n                    document.querySelector(`.${projNameConvert}-task-amt`).innerText = projsAndTasks[prop].length;\r\n                    \r\n                    if (activePgTitle.innerText === projDropDown.value || (activePgTitle.innerText === \"Important\" && taskInfo.important)) {\r\n                        createTask(taskInfo);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (const prop in projsAndTasks) {\r\n                // Find the selected project\r\n                if (prop === projDropDown.value) {\r\n                    const clickedTaskProjName = taskCards[clickedTaskCardIndex].querySelector(\".task-proj\").getAttribute(\"taskProj\");\r\n                    const clickedTaskChkBox = taskCards[clickedTaskCardIndex].querySelector(\".task-done-chkbox\");\r\n                    const clickedTaskImportance = taskCards[clickedTaskCardIndex].querySelector(\".important-btn\").getAttribute(\"important\");\r\n                    const clickedTaskCard = activePgBody.children[clickedTaskCardIndex];\r\n                    const clickedTaskTitle = clickedTaskCard.querySelector(\".task\").innerText;\r\n                    // Store the new task details\r\n                    const taskInfo = {\r\n                        taskProj: prop,\r\n                        taskDone: clickedTaskChkBox.checked,\r\n                        task: modalBoxTaskTitle.value,\r\n                        note: modalBoxTaskNote.value,\r\n                        dueDate: modalBoxTaskDate.value,\r\n                        important: modalBoxTaskImportance.checked\r\n                    };\r\n\r\n                    console.log(taskInfo.taskProj);\r\n                    console.log(clickedTaskImportance);\r\n                    console.log(typeof(clickedTaskImportance));\r\n                    console.log(taskInfo.important);\r\n                    console.log(typeof(taskInfo.important));\r\n\r\n                    if (clickedTaskImportance === \"true\" && taskInfo.important === true) {\r\n                        console.log(\"Both are important!\");\r\n                        projsAndTasks.Important.forEach(updateTask);\r\n                        projsAndTasks[clickedTaskProjName].forEach(updateTask);\r\n                    } else if (clickedTaskImportance === \"true\" && taskInfo.important === false) {\r\n                        console.log(\"Only clicked task is important!\");\r\n                        projsAndTasks.Important.forEach(delTaskFromImpProj);\r\n                        projsAndTasks[clickedTaskProjName].forEach(updateTask);\r\n                    } else if (clickedTaskImportance === \"false\" && taskInfo.important === true) {\r\n                        console.log(\"Only updated task is important!\");\r\n                        projsAndTasks.Important.push(taskInfo);\r\n                        document.querySelector(\".important-task-amt\").innerText = projsAndTasks.Important.length;\r\n                        projsAndTasks[clickedTaskProjName].forEach(updateTask);\r\n                    } else if (clickedTaskImportance === \"false\" && taskInfo.important === false) {\r\n                        console.log(\"None is important!\");\r\n                        projsAndTasks[clickedTaskProjName].forEach(updateTask);\r\n                    }\r\n\r\n                    function updateTask(currItem) {\r\n                        if (currItem.taskProj === clickedTaskProjName && currItem.task === clickedTaskTitle) {\r\n                            currItem.taskProj = prop;\r\n                            currItem.taskDone = taskInfo.taskDone;\r\n                            currItem.task = taskInfo.task;\r\n                            currItem.note = taskInfo.note;\r\n                            currItem.dueDate = taskInfo.dueDate;\r\n                            currItem.important = taskInfo.important;\r\n                        }\r\n                    }\r\n\r\n                    function delTaskFromImpProj(currItem, currItemInd) {\r\n                        if (currItem.taskProj === clickedTaskProjName && currItem.task === clickedTaskTitle) {\r\n                            projsAndTasks.Important.splice(currItemInd, 1);\r\n                            document.querySelector(\".important-task-amt\").innerText = projsAndTasks.Important.length;\r\n                        }\r\n                    }\r\n\r\n                    // If the clicked task's project name is different from the selected project\r\n                    if (clickedTaskProjName !== projDropDown.value) {\r\n                        // Move updated task to the selected project\r\n                        console.log(clickedTaskProjName);\r\n                        console.log(projDropDown.value);\r\n                        const removedTask = projsAndTasks[clickedTaskProjName].splice(clickedTaskCardIndex, 1);\r\n                        projsAndTasks[projDropDown.value].push(removedTask[0]);\r\n\r\n                        // Update the clicked task's current project's task amount\r\n                        const clickedTaskprojNameConvert = clickedTaskProjName.toLowerCase().replace(/\\W/g, \"-\");\r\n                        document.querySelector(`.${clickedTaskprojNameConvert}-task-amt`).innerText = projsAndTasks[clickedTaskProjName].length;\r\n\r\n                        // Update the selected project's task amount\r\n                        const projDropDownConvert = projDropDown.value.toLowerCase().replace(/\\W/g, \"-\");\r\n                        document.querySelector(`.${projDropDownConvert}-task-amt`).innerText = projsAndTasks[projDropDown.value].length;\r\n                    }\r\n                    \r\n                        // Regenerate task cards\r\n                        while (activePgBody.firstChild) {\r\n                            activePgBody.firstChild.remove();\r\n                        }\r\n    \r\n                        projsAndTasks[activePgTitle.innerText].forEach(i => createTask(i));\r\n                }\r\n            }\r\n        }\r\n        modalBoxTaskTitle.value = \"\";\r\n        modalBoxTaskNote.value = \"\";\r\n        modalBoxTaskDate.value = \"\";\r\n        modalBoxTaskImportance.checked = false;\r\n        newTaskModalBg.style.display = \"none\";\r\n    }\r\n}\r\n\r\nfunction createTask(taskInfoObj) {\r\n    console.log(taskInfoObj);\r\n    console.log(taskInfoObj.task);\r\n    const taskSpan = shared.createElement(\"span\", [taskInfoObj.task]);\r\n    const taskConvert = taskInfoObj.task.toLowerCase().replace(/\\W/g, \"-\");\r\n    const taskDoneInputEle = shared.createElement(\"input\", null, {type: \"checkbox\", class: \"task-done-chkbox\", task: taskConvert});\r\n\r\n    if (taskInfoObj.taskDone) {\r\n        taskDoneInputEle.checked = true;\r\n        taskSpan.classList.add(\"task\", \"task-done\");\r\n    } else {\r\n        taskDoneInputEle.checked = false;\r\n        taskSpan.classList.add(\"task\");\r\n    }\r\n\r\n    const dueDateSpan = shared.createElement(\"span\", [taskInfoObj.dueDate], {class: \"due-date\"});\r\n    const taskAndDateDiv = shared.createElement(\"div\", [taskSpan, dueDateSpan], {class: \"task-and-due-date\", task: taskConvert});\r\n\r\n    const starIcon = document.createElement(\"i\");\r\n    if (taskInfoObj.important) {\r\n        starIcon.classList.add(\"fas\", \"fa-star\", \"important-task\");\r\n    } else {\r\n        starIcon.classList.add(\"fas\", \"fa-star\");\r\n    }\r\n\r\n    let starBtn = null;\r\n\r\n    if (taskInfoObj.important) {\r\n        starBtn = shared.createElement(\"button\", [starIcon], {class: \"important-btn\", task: taskConvert, important: true});\r\n    } else {\r\n        starBtn = shared.createElement(\"button\", [starIcon], {class: \"important-btn\", task: taskConvert, important: false});\r\n    }\r\n\r\n    const penIcon = document.createElement(\"i\");\r\n    penIcon.classList.add(\"fas\", \"fa-pen\");\r\n    const penBtn =  shared.createElement(\"button\", [penIcon], {class: \"edit-task-btn\", task: taskConvert});\r\n\r\n    const trashIcon = document.createElement(\"i\");\r\n    trashIcon.classList.add(\"fas\", \"fa-trash\");\r\n    const trashBtn = shared.createElement(\"button\", [trashIcon], {class: \"trash-task-btn\", task: taskConvert});\r\n\r\n    const taskInfoSecEle = shared.createElement(\"section\", [taskDoneInputEle, taskAndDateDiv, starBtn, penBtn, trashBtn], {class: \"task-info\"});\r\n    \r\n    const noteStrongEle =shared.createElement(\"strong\", [\"Note:\"]);\r\n    const noteHeaderSpan = shared.createElement(\"span\", [noteStrongEle], {class: \"note-header\"});\r\n    const noteBodySpan = shared.createElement(\"span\", [taskInfoObj.note], {class: \"note-body\"});\r\n    const taskProjSpan = shared.createElement(\"span\", null, {class: \"task-proj\", taskProj: taskInfoObj.taskProj});\r\n    taskProjSpan.innerHTML = `<strong>Project:</strong> ${taskInfoObj.taskProj}`;\r\n    const taskNoteSecEle = shared.createElement(\"section\", [noteHeaderSpan, noteBodySpan, taskProjSpan], {class: \"task-note\"});\r\n\r\n    const taskCardDiv = shared.createElement(\"div\", [taskInfoSecEle, taskNoteSecEle], {class: \"task-card\"});\r\n    activePgBody.append(taskCardDiv);\r\n}\r\n\r\nfunction actOnProjEle(objClicked) {\r\n    const newProjBtn = objClicked.target.closest(\"#new-proj-btn\");\r\n    const projModalHeader = document.getElementById(\"proj-modal-header\");\r\n    const editProjBtn = objClicked.target.closest(\".edit-proj-btn\");\r\n    const trashProjBtn = objClicked.target.closest(\".trash-proj-btn\");\r\n\r\n    if (newProjBtn) {\r\n        projModalHeader.innerText = \"New Project\";\r\n        createProjBtn.innerText = \"Create Project\";\r\n        showNewProjModal();\r\n    }\r\n\r\n    if (editProjBtn) {\r\n        projModalHeader.innerText = \"Edit Project\";\r\n        createProjBtn.innerText = \"Update Project\";\r\n\r\n        for (let i = 0; i < projCards.length; i++) {\r\n            const projName = projCards[i].firstElementChild.innerText;\r\n            const projNameConvert = projName.toLowerCase().replace(/\\W/g, \"-\");\r\n\r\n            if (editProjBtn.getAttribute(\"proj\") === projNameConvert) {\r\n                const clickedProjCard = projCards[i];\r\n                modalBoxProjTitle.value = clickedProjCard.querySelector(\".proj-name\").innerText;\r\n                clickedProjCardIndex = i;\r\n                showNewProjModal();\r\n            }\r\n        }\r\n    }\r\n\r\n    if (trashProjBtn) {\r\n        for (let i = 0; i < projCards.length; i++) {\r\n            const projName = projCards[i].firstElementChild.innerText;\r\n            const projNameConvert = projName.toLowerCase().replace(/\\W/g, \"-\");\r\n\r\n            if (trashProjBtn.getAttribute(\"proj\") === projNameConvert) {\r\n                const clickedProjCard = projCards[i];\r\n                const clickedProjName = clickedProjCard.querySelector(\".proj-name\").innerText;\r\n                delete projsAndTasks[clickedProjName];\r\n                clickedProjCard.remove();\r\n                displayTodayTasks();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction actOnTaskEle(objClicked) {\r\n    const addNewTaskBtn = objClicked.target.closest(\"#add-new-task-btn\");\r\n    const taskModalHeader = document.getElementById(\"task-modal-header\");\r\n    const taskDoneChkBox = objClicked.target.closest(\".task-done-chkbox\");\r\n    const taskAndDueDateDiv = objClicked.target.closest(\".task-and-due-date\");\r\n    const starIcon = objClicked.target.closest(\".fa-star\");\r\n    const editTaskBtn = objClicked.target.closest(\".edit-task-btn\");\r\n    const trashTaskBtn = objClicked.target.closest(\".trash-task-btn\");\r\n\r\n    if (taskDoneChkBox) {\r\n        for (let i = 0; i < taskCards.length; i++) {\r\n            const task = taskCards[i].querySelector(\".task\").innerText;\r\n            const taskConvert = task.toLowerCase().replace(/\\W/g, \"-\");\r\n            if (taskDoneChkBox.getAttribute(\"task\") === taskConvert) {\r\n                clickedTaskCardIndex = i;\r\n            }\r\n        }\r\n        const clickedCardTask = activePgBody.children[clickedTaskCardIndex].querySelector(\".task\");\r\n        clickedCardTask.classList.toggle(\"task-done\");\r\n        if (taskDoneChkBox.checked) {\r\n            projsAndTasks[activePgTitle.innerText][clickedTaskCardIndex].taskDone = true;\r\n        } else {\r\n            projsAndTasks[activePgTitle.innerText][clickedTaskCardIndex].taskDone = false;\r\n        }\r\n    }\r\n\r\n    if (taskAndDueDateDiv) {\r\n        for (let i = 0; i < taskCards.length; i++) {\r\n            const task = taskCards[i].querySelector(\".task\").innerText;\r\n            const taskConvert = task.toLowerCase().replace(/\\W/g, \"-\");\r\n            if (taskAndDueDateDiv.getAttribute(\"task\") === taskConvert) {\r\n                clickedTaskCardIndex = i;\r\n            }\r\n        }\r\n        const clickedCardNote = activePgBody.children[clickedTaskCardIndex].querySelector(\".task-note\");\r\n        if (clickedCardNote.style.display === \"\") {\r\n            clickedCardNote.style.display = \"grid\";\r\n        } else {\r\n            clickedCardNote.style.display = \"\";\r\n        }\r\n    }\r\n\r\n    if (addNewTaskBtn) {\r\n        taskModalHeader.innerText = \"New Task\";\r\n        addTaskBtn.innerText = \"Add Task\";\r\n        \r\n        const projOptsArr = Array.from(projDropDown.children);\r\n        if (projOptsArr.some(i => i.value === activePgTitle.innerText)) {\r\n            const activePgProjOptIndex = projOptsArr.findIndex((i) => i.value === activePgTitle.innerText);\r\n            projDropDown.children[activePgProjOptIndex].selected = true;\r\n        } else {\r\n            projDropDown.children[0].selected = true;\r\n        }\r\n\r\n        showNewTaskModal();\r\n    }\r\n\r\n    if (starIcon) {\r\n        for (let i = 0; i < taskCards.length; i++) {\r\n            const task = taskCards[i].querySelector(\".task\").innerText;\r\n            const taskConvert = task.toLowerCase().replace(/\\W/g, \"-\");\r\n            if (starIcon.closest(\"button\").getAttribute(\"task\") === taskConvert) {\r\n                clickedTaskCardIndex = i;\r\n            }\r\n        }\r\n\r\n        const clickedTaskCard = taskCards[clickedTaskCardIndex];\r\n        const clickedTaskProjName = clickedTaskCard.querySelector(\".task-proj\").getAttribute(\"taskProj\");\r\n        const clickedTaskTitle = clickedTaskCard.querySelector(\".task\").innerText;\r\n\r\n        starIcon.classList.toggle(\"important-task\");\r\n\r\n        if (activePgTitle.innerText === \"Important\") {\r\n            projsAndTasks[clickedTaskProjName].forEach(changeImpToFalse);\r\n\r\n            function changeImpToFalse(currItem, currItemInd) {\r\n                if (currItem.taskProj === clickedTaskProjName && currItem.task === clickedTaskTitle) {\r\n                    projsAndTasks[clickedTaskProjName][currItemInd].important = false;\r\n                    clickedTaskCard.querySelector(\".important-btn\").setAttribute(\"important\", false);\r\n                }\r\n            }\r\n\r\n            projsAndTasks.Important.forEach(delTaskFromImpProj);\r\n            \r\n            while (activePgBody.firstChild) {\r\n                activePgBody.firstChild.remove();\r\n            }\r\n\r\n            projsAndTasks.Important.forEach(i => createTask(i));\r\n        }\r\n\r\n        if (activePgTitle.innerText !== \"Important\") {\r\n            if (projsAndTasks[clickedTaskProjName][clickedTaskCardIndex].important) {\r\n                projsAndTasks[clickedTaskProjName][clickedTaskCardIndex].important = false;\r\n                clickedTaskCard.querySelector(\".important-btn\").setAttribute(\"important\", false);\r\n                projsAndTasks.Important.forEach(delTaskFromImpProj);\r\n            } else {\r\n                projsAndTasks[clickedTaskProjName][clickedTaskCardIndex].important = true;\r\n                clickedTaskCard.querySelector(\".important-btn\").setAttribute(\"important\", true);\r\n                projsAndTasks.Important.push(projsAndTasks[clickedTaskProjName][clickedTaskCardIndex]);\r\n                document.querySelector(\".important-task-amt\").innerText = projsAndTasks.Important.length;\r\n            }\r\n        }\r\n\r\n        function delTaskFromImpProj(currItem, currItemInd) {\r\n            if (currItem.taskProj === clickedTaskProjName && currItem.task === clickedTaskTitle) {\r\n                projsAndTasks.Important.splice(currItemInd, 1);\r\n                document.querySelector(\".important-task-amt\").innerText = projsAndTasks.Important.length;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (editTaskBtn) {\r\n        for (let i = 0; i < taskCards.length; i++) {\r\n            const task = taskCards[i].querySelector(\".task\").innerText;\r\n            const taskConvert = task.toLowerCase().replace(/\\W/g, \"-\");\r\n            if (editTaskBtn.closest(\"button\").getAttribute(\"task\") === taskConvert) {\r\n                clickedTaskCardIndex = i;\r\n                console.log(`The clicked task is at index ${clickedTaskCardIndex}`);\r\n            }\r\n        }\r\n        taskModalHeader.innerText = \"Edit Task\";\r\n        addTaskBtn.innerText = \"Update Task\";\r\n        modalBoxTaskTitle.value = projsAndTasks[activePgTitle.innerText][clickedTaskCardIndex].task;\r\n        modalBoxTaskNote.value = projsAndTasks[activePgTitle.innerText][clickedTaskCardIndex].note;\r\n        modalBoxTaskDate.value = projsAndTasks[activePgTitle.innerText][clickedTaskCardIndex].dueDate;\r\n        modalBoxTaskImportance.checked = projsAndTasks[activePgTitle.innerText][clickedTaskCardIndex].important;\r\n\r\n        const projOptsArr = Array.from(projDropDown.children);\r\n        const clickedTaskCard = taskCards[clickedTaskCardIndex];\r\n        const clickedTaskProjName = clickedTaskCard.querySelector(\".task-proj\").getAttribute(\"taskProj\");\r\n\r\n        if (projOptsArr.some(i => i.value === clickedTaskProjName)) {\r\n            const activePgProjOptIndex = projOptsArr.findIndex((i) => i.value === clickedTaskProjName);\r\n            projDropDown.children[activePgProjOptIndex].selected = true;\r\n        }\r\n\r\n        showNewTaskModal();\r\n    }\r\n\r\n    if (trashTaskBtn) {\r\n        for (let i = 0; i < taskCards.length; i++) {\r\n            const task = taskCards[i].querySelector(\".task\").innerText;\r\n            const taskConvert = task.toLowerCase().replace(/\\W/g, \"-\");\r\n            if (trashTaskBtn.closest(\"button\").getAttribute(\"task\") === taskConvert) {\r\n                clickedTaskCardIndex = i;\r\n            }\r\n        }\r\n        const clickedTaskCard = activePgBody.children[clickedTaskCardIndex];\r\n        const clickedTaskProjName = clickedTaskCard.querySelector(\".task-proj\").getAttribute(\"taskProj\");\r\n        const clickedTaskProjNameConvert = clickedTaskProjName.toLowerCase().replace(/\\W/g, \"-\");\r\n        const clickedTaskTitle = clickedTaskCard.querySelector(\".task\").innerText;\r\n\r\n        console.log(projsAndTasks[clickedTaskProjName]);\r\n\r\n        if (activePgTitle.innerText !== \"Important\") {\r\n            projsAndTasks[clickedTaskProjName].splice(clickedTaskCardIndex, 1);\r\n\r\n            if (projsAndTasks[clickedTaskProjName][clickedTaskCardIndex].important) {\r\n                projsAndTasks.Important.forEach(delTaskFromImpProj);\r\n            }\r\n        }\r\n\r\n        if (activePgTitle.innerText === \"Important\") {\r\n            projsAndTasks.Important.forEach(delTaskFromImpProj);\r\n\r\n            for (let i = 0; i < projsAndTasks[clickedTaskProjName].length; i++) {\r\n                const currItem = projsAndTasks[clickedTaskProjName][i];\r\n                if (currItem.taskProj === clickedTaskProjName && currItem.task === clickedTaskTitle) {\r\n                    projsAndTasks[clickedTaskProjName].splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        document.querySelector(`.${clickedTaskProjNameConvert}-task-amt`).innerText = projsAndTasks[clickedTaskProjName].length;\r\n\r\n        while (activePgBody.firstChild) {\r\n            activePgBody.firstChild.remove();\r\n        }\r\n\r\n        if (activePgTitle.innerText === \"Important\") {\r\n            projsAndTasks.Important.forEach(i => createTask(i));\r\n        } else {\r\n            projsAndTasks[clickedTaskProjName].forEach(i => createTask(i));\r\n        }\r\n\r\n        function delTaskFromImpProj(currItem, currItemInd) {\r\n            if (currItem.taskProj === clickedTaskProjName && currItem.task === clickedTaskTitle) {\r\n                projsAndTasks.Important.splice(currItemInd, 1);\r\n                document.querySelector(\".important-task-amt\").innerText = projsAndTasks.Important.length;\r\n            }\r\n        }\r\n    }\r\n}","import {shared} from \"./aggregator.js\";\r\n\r\nconst mainEleArea = (() => {\r\n    const activePgTitle = shared.createElement(\"span\", null, {id: \"active-pg-title\"});\r\n    const addNewTaskBtn = shared.createElement(\"button\", [\"Add New Task\"], {id: \"add-new-task-btn\"});\r\n    const activePgHeader = shared.createElement(\"header\", [activePgTitle, addNewTaskBtn], {id: \"active-page-header\"});\r\n    const activePgBody = shared.createElement(\"div\", null, {id: \"active-pg-body\"});\r\n    const mainEle = shared.createElement(\"main\", [activePgHeader, activePgBody], {id: \"main-ele\"});\r\n    return mainEle;\r\n})();\r\n\r\nexport default mainEleArea;","import {shared} from \"./aggregator.js\";\r\n\r\nconst newProjModal = (() => {\r\n    const headerTextSpan = shared.createElement(\"span\", null, {id: \"proj-modal-header\"});\r\n    const closeModalSpan = shared.createElement(\"span\", [\"x\"], {id: \"close-proj-modal\", class: \"close-modal\"});\r\n    const headerEle = shared.createElement(\"header\", [headerTextSpan, closeModalSpan]);\r\n\r\n    const cancelProjBtn = shared.createElement(\"button\", [\"Cancel\"], {type: \"button\", id: \"cancel-proj-btn\"});\r\n    cancelProjBtn.classList.add(\"modal-btn\", \"cancel-btn\");\r\n\r\n    const createProjBtn = shared.createElement(\"button\", null, {type: \"button\", id: \"create-proj-btn\"});\r\n    createProjBtn.classList.add(\"modal-btn\", \"create-btn\");\r\n\r\n    const modalBtnDiv = shared.createElement(\"div\", [cancelProjBtn, createProjBtn], {class: \"modal-btns-div\"});\r\n    \r\n    const formLabelEle = shared.createElement(\"label\", [\"Name\"], {for: \"proj-title\"});\r\n    const formInputEle = shared.createElement(\"input\", null, {type: \"text\", id: \"proj-title\"});\r\n    const newProjFormEle = shared.createElement(\"form\", [formLabelEle, formInputEle, modalBtnDiv], {id: \"new-proj-form\"});\r\n\r\n    const modalBoxBodyDiv = shared.createElement(\"div\", [newProjFormEle], {class: \"modal-box-body\"});\r\n    const modalBoxDiv = shared.createElement(\"div\", [headerEle, modalBoxBodyDiv], {id:\"new-proj-modal-box\", class: \"modal-box\"});\r\n    const modalBgSection = shared.createElement(\"section\", [modalBoxDiv], {id: \"new-proj-modal-bg\", class: \"modal-bg\"});\r\n    return modalBgSection;\r\n})();\r\n\r\nexport default newProjModal;","import {shared} from \"./aggregator.js\";\r\n\r\nconst newTaskModal = (() => {\r\n    const headerTextSpan = shared.createElement(\"span\",null, {id: \"task-modal-header\"});\r\n    const closeModalSpan = shared.createElement(\"span\", [\"x\"], {id: \"close-task-modal\", class: \"close-modal\"});\r\n    const headerEle = shared.createElement(\"header\", [headerTextSpan, closeModalSpan]);\r\n    \r\n    const taskLabelEle = shared.createElement(\"label\", [\"Task\"], {for: \"task-title\"});\r\n    const taskInputEle = shared.createElement(\"input\", null, {type: \"text\", id: \"task-title\"});\r\n    const taskDiv = shared.createElement(\"div\", [taskLabelEle, taskInputEle], {id: \"task\"});\r\n\r\n    const noteLabelEle = shared.createElement(\"label\", [\"Note\"], {for: \"task-note\"});\r\n    const noteTextAreaEle = shared.createElement(\"textarea\", null, {id: \"task-note\"});\r\n    const noteDiv = shared.createElement(\"div\", [noteLabelEle, noteTextAreaEle], {id: \"note\"});\r\n\r\n    const dueDateLabelEle = shared.createElement(\"label\", [\"Due Date\"], {for: \"task-date\"});\r\n    const dueDateInputEle = shared.createElement(\"input\", null, {type: \"date\", id: \"task-date\"});\r\n    const dueDateDiv = shared.createElement(\"div\", [dueDateLabelEle, dueDateInputEle], {id: \"due-date\"});\r\n\r\n    const importanceTextSpan = shared.createElement(\"span\", [\"Mark as important\"]);\r\n    const importanceInputEle = shared.createElement(\"input\", null, {type: \"checkbox\", id: \"task-importance\"});\r\n    const importanceLabelEle = shared.createElement(\"label\", [importanceTextSpan, importanceInputEle]);\r\n    const importanceDiv = shared.createElement(\"div\", [importanceLabelEle], {id: \"importance\"});\r\n\r\n    const addToProjLabelEle = shared.createElement(\"label\", [\"Add to project\"], {for: \"proj-dropdown\"});\r\n    const addToProjSelectEle = shared.createElement(\"select\", null, {id: \"proj-dropdown\"});\r\n    const addToProjDiv = shared.createElement(\"div\", [addToProjLabelEle, addToProjSelectEle], {id: \"add-to-proj\"});\r\n\r\n    const cancelTaskBtn = shared.createElement(\"button\", [\"Cancel\"], {type: \"button\", id: \"cancel-task-btn\"});\r\n    cancelTaskBtn.classList.add(\"modal-btn\", \"cancel-btn\");\r\n    const addTaskBtn = shared.createElement(\"button\", null, {type: \"button\", id: \"add-task-btn\"});\r\n    addTaskBtn.classList.add(\"modal-btn\", \"create-btn\");\r\n    const modalBtnDiv = shared.createElement(\"div\", [cancelTaskBtn, addTaskBtn], {class: \"modal-btns-div\"});\r\n    \r\n    const newProjFormEle = shared.createElement(\"form\", [taskDiv, noteDiv, dueDateDiv, importanceDiv, addToProjDiv, modalBtnDiv], {id: \"new-proj-form\"});\r\n\r\n    const modalBoxBodyDiv = shared.createElement(\"div\", [newProjFormEle], {class: \"modal-box-body\"});\r\n    const modalBoxDiv = shared.createElement(\"div\", [headerEle, modalBoxBodyDiv], {id:\"new-task-modal-box\", class: \"modal-box\"});\r\n    const modalBgSection = shared.createElement(\"section\", [modalBoxDiv], {id: \"new-task-modal-bg\", class: \"modal-bg\"});\r\n    return modalBgSection;\r\n})();\r\n\r\nexport default newTaskModal;","const shared = (() => {\r\n    return {\r\n        createElement(eleType, node, attr) {\r\n            const element = document.createElement(eleType);\r\n            if (node) {node.forEach(i => element.append(i));}\r\n            if (attr) {\r\n                for (let key in attr) {element.setAttribute(key, attr[key]);}\r\n            }\r\n            return element;\r\n        }\r\n    }\r\n})();\r\n\r\nexport {shared};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}